/* tslint:disable */
/* eslint-disable */
/**
 * AccountWebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Corporate
 */
export interface Corporate {
    /**
     * 
     * @type {number}
     * @memberof Corporate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'createdOn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'updatedOn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Corporate
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'organizationName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'address1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'address2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'zip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    'npiNumber'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Corporate
     */
    'yearsOfCoaching'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Corporate
     */
    'trackHealth'?: boolean;
}
/**
 * 
 * @export
 * @interface DateOnly
 */
export interface DateOnly {
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'day'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof DateOnly
     */
    'dayOfWeek'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayOfYear'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayNumber'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DayOfWeek = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];


/**
 * 
 * @export
 * @interface DemographicRequestModel
 */
export interface DemographicRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'gender'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'dob'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'address1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'address2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DemographicRequestModel
     */
    'zip'?: string | null;
}
/**
 * 
 * @export
 * @interface FitnessProfileRequestModel
 */
export interface FitnessProfileRequestModel {
    /**
     * 
     * @type {string}
     * @memberof FitnessProfileRequestModel
     */
    'height'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FitnessProfileRequestModel
     */
    'weight'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FitnessProfileRequestModel
     */
    'chronicCondition'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FitnessProfileRequestModel
     */
    'smoker'?: boolean | null;
}
/**
 * 
 * @export
 * @interface LoginRequestModel
 */
export interface LoginRequestModel {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestModel
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestModel
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentDetailsRequestModel
 */
export interface PaymentDetailsRequestModel {
    /**
     * 
     * @type {number}
     * @memberof PaymentDetailsRequestModel
     */
    'planId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentDetailsRequestModel
     */
    'roleId'?: number;
}
/**
 * 
 * @export
 * @interface RegisterTempUserModel
 */
export interface RegisterTempUserModel {
    /**
     * 
     * @type {string}
     * @memberof RegisterTempUserModel
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterTempUserModel
     */
    'middleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterTempUserModel
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterTempUserModel
     */
    'emailId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterTempUserModel
     */
    'phoneNumber'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterUserModel
 */
export interface RegisterUserModel {
    /**
     * 
     * @type {number}
     * @memberof RegisterUserModel
     */
    'tempId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserModel
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserModel
     */
    'otp'?: string | null;
}
/**
 * 
 * @export
 * @interface SocialProfileRequestModel
 */
export interface SocialProfileRequestModel {
    /**
     * 
     * @type {string}
     * @memberof SocialProfileRequestModel
     */
    'educationLevel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SocialProfileRequestModel
     */
    'incomeRange'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SocialProfileRequestModel
     */
    'hospitalAssociated'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SocialProfileRequestModel
     */
    'healthCare'?: boolean | null;
}
/**
 * 
 * @export
 * @interface UserDashboardConfiguration
 */
export interface UserDashboardConfiguration {
    /**
     * 
     * @type {number}
     * @memberof UserDashboardConfiguration
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardConfiguration
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardConfiguration
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardConfiguration
     */
    'createdOn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardConfiguration
     */
    'updatedOn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDashboardConfiguration
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDashboardConfiguration
     */
    'dashboard_configurationId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDashboardConfiguration
     */
    'user_device_id'?: number;
}
/**
 * 
 * @export
 * @interface UserDashboardPreference
 */
export interface UserDashboardPreference {
    /**
     * 
     * @type {number}
     * @memberof UserDashboardPreference
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardPreference
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardPreference
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardPreference
     */
    'createdOn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDashboardPreference
     */
    'updatedOn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDashboardPreference
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDashboardPreference
     */
    'user_dashboard_configurationId'?: number;
}
/**
 * 
 * @export
 * @interface UserPaymentPlan
 */
export interface UserPaymentPlan {
    /**
     * 
     * @type {number}
     * @memberof UserPaymentPlan
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserPaymentPlan
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserPaymentPlan
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserPaymentPlan
     */
    'createdOn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserPaymentPlan
     */
    'updatedOn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserPaymentPlan
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserPaymentPlan
     */
    'payment_Plan_Id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserPaymentPlan
     */
    'start_Date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaymentPlan
     */
    'end_Date'?: string;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {DateOnly}
     * @memberof WeatherForecast
     */
    'date'?: DateOnly;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Corporate} [corporate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddCorporatePost: async (corporate?: Corporate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/AddCorporate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(corporate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [subject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddInvitePost: async (email?: string, subject?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/AddInvite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserDashboardConfiguration} [userDashboardConfiguration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddUserDashboardConfigPost: async (userDashboardConfiguration?: UserDashboardConfiguration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/AddUserDashboardConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDashboardConfiguration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserDashboardPreference} [userDashboardPreference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddUserDashboardPreferencePost: async (userDashboardPreference?: UserDashboardPreference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/AddUserDashboardPreference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDashboardPreference, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserDashboardPreference} [userDashboardPreference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddUserTeamPreferencePost: async (userDashboardPreference?: UserDashboardPreference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/AddUserTeamPreference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDashboardPreference, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {boolean} [isApproved] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountApproveInvitePut: async (id?: number, isApproved?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/ApproveInvite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (isApproved !== undefined) {
                localVarQueryParameter['isApproved'] = isApproved;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDashboardConfigurationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/DashboardConfiguration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDeleteUserDashboardPreferenceDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/DeleteUserDashboardPreference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDeleteUserTeamPreferenceDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/DeleteUserTeamPreference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DemographicRequestModel} [demographicRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDemographicsPut: async (demographicRequestModel?: DemographicRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/demographics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(demographicRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FitnessProfileRequestModel} [fitnessProfileRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountFitnessPut: async (fitnessProfileRequestModel?: FitnessProfileRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/fitness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fitnessProfileRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [emailId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountForgotPasswordGet: async (emailId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/ForgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailId !== undefined) {
                localVarQueryParameter['emailId'] = emailId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetCorporateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetCorporate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetDemographicsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetDemographics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetFitnessGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetFitness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetMyApprovalsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetMyApprovals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetMyInvitesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetMyInvites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetProfileGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetProfile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetSocialGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetSocial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserDashboardConfigGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetUserDashboardConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserDashboardPreferenceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetUserDashboardPreference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserTeamPreferenceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetUserTeamPreference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserpaymentplansGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/GetUserpaymentplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestModel} [loginRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost: async (loginRequestModel?: LoginRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaymentDetailsRequestModel} [paymentDetailsRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPaymentplansPut: async (paymentDetailsRequestModel?: PaymentDetailsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/paymentplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentDetailsRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPaymentplansrolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/paymentplansroles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPlansGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserModel} [registerUserModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost: async (registerUserModel?: RegisterUserModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterTempUserModel} [registerTempUserModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegistertempPost: async (registerTempUserModel?: RegisterTempUserModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/registertemp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerTempUserModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [emailId] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountResetPasswordPost: async (emailId?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/ResetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailId !== undefined) {
                localVarQueryParameter['emailId'] = emailId;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialProfileRequestModel} [socialProfileRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountSocialPut: async (socialProfileRequestModel?: SocialProfileRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/social`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialProfileRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Corporate} [corporate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateCorporatePut: async (corporate?: Corporate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/UpdateCorporate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(corporate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateInviteStatusPut: async (id?: number, status?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/UpdateInviteStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUserInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/UserInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserPaymentPlan} [userPaymentPlan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUserpaymentplansPost: async (userPaymentPlan?: UserPaymentPlan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/Userpaymentplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPaymentPlan, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Corporate} [corporate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountAddCorporatePost(corporate?: Corporate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountAddCorporatePost(corporate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [subject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountAddInvitePost(email?: string, subject?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountAddInvitePost(email, subject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserDashboardConfiguration} [userDashboardConfiguration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountAddUserDashboardConfigPost(userDashboardConfiguration?: UserDashboardConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountAddUserDashboardConfigPost(userDashboardConfiguration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserDashboardPreference} [userDashboardPreference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountAddUserDashboardPreferencePost(userDashboardPreference?: UserDashboardPreference, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountAddUserDashboardPreferencePost(userDashboardPreference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserDashboardPreference} [userDashboardPreference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountAddUserTeamPreferencePost(userDashboardPreference?: UserDashboardPreference, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountAddUserTeamPreferencePost(userDashboardPreference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {boolean} [isApproved] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountApproveInvitePut(id?: number, isApproved?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountApproveInvitePut(id, isApproved, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountDashboardConfigurationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountDashboardConfigurationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountDeleteUserDashboardPreferenceDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountDeleteUserDashboardPreferenceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountDeleteUserTeamPreferenceDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountDeleteUserTeamPreferenceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DemographicRequestModel} [demographicRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountDemographicsPut(demographicRequestModel?: DemographicRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountDemographicsPut(demographicRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FitnessProfileRequestModel} [fitnessProfileRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountFitnessPut(fitnessProfileRequestModel?: FitnessProfileRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountFitnessPut(fitnessProfileRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [emailId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountForgotPasswordGet(emailId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountForgotPasswordGet(emailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetCorporateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetCorporateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetDemographicsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetDemographicsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetFitnessGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetFitnessGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetMyApprovalsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetMyApprovalsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetMyInvitesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetMyInvitesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetProfileGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetProfileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetSocialGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetSocialGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetUserDashboardConfigGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetUserDashboardConfigGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetUserDashboardPreferenceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetUserDashboardPreferenceGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetUserTeamPreferenceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetUserTeamPreferenceGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetUserpaymentplansGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetUserpaymentplansGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestModel} [loginRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountLoginPost(loginRequestModel?: LoginRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountLoginPost(loginRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaymentDetailsRequestModel} [paymentDetailsRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountPaymentplansPut(paymentDetailsRequestModel?: PaymentDetailsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountPaymentplansPut(paymentDetailsRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountPaymentplansrolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountPaymentplansrolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountPlansGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountPlansGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterUserModel} [registerUserModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountRegisterPost(registerUserModel?: RegisterUserModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountRegisterPost(registerUserModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterTempUserModel} [registerTempUserModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountRegistertempPost(registerTempUserModel?: RegisterTempUserModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountRegistertempPost(registerTempUserModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [emailId] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountResetPasswordPost(emailId?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountResetPasswordPost(emailId, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SocialProfileRequestModel} [socialProfileRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountSocialPut(socialProfileRequestModel?: SocialProfileRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountSocialPut(socialProfileRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Corporate} [corporate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountUpdateCorporatePut(corporate?: Corporate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountUpdateCorporatePut(corporate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountUpdateInviteStatusPut(id?: number, status?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountUpdateInviteStatusPut(id, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountUserInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountUserInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserPaymentPlan} [userPaymentPlan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountUserpaymentplansPost(userPaymentPlan?: UserPaymentPlan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountUserpaymentplansPost(userPaymentPlan, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {Corporate} [corporate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddCorporatePost(corporate?: Corporate, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountAddCorporatePost(corporate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [subject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddInvitePost(email?: string, subject?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountAddInvitePost(email, subject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserDashboardConfiguration} [userDashboardConfiguration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddUserDashboardConfigPost(userDashboardConfiguration?: UserDashboardConfiguration, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountAddUserDashboardConfigPost(userDashboardConfiguration, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserDashboardPreference} [userDashboardPreference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddUserDashboardPreferencePost(userDashboardPreference?: UserDashboardPreference, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountAddUserDashboardPreferencePost(userDashboardPreference, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserDashboardPreference} [userDashboardPreference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountAddUserTeamPreferencePost(userDashboardPreference?: UserDashboardPreference, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountAddUserTeamPreferencePost(userDashboardPreference, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {boolean} [isApproved] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountApproveInvitePut(id?: number, isApproved?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountApproveInvitePut(id, isApproved, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDashboardConfigurationGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountDashboardConfigurationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDeleteUserDashboardPreferenceDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountDeleteUserDashboardPreferenceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDeleteUserTeamPreferenceDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountDeleteUserTeamPreferenceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DemographicRequestModel} [demographicRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountDemographicsPut(demographicRequestModel?: DemographicRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountDemographicsPut(demographicRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FitnessProfileRequestModel} [fitnessProfileRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountFitnessPut(fitnessProfileRequestModel?: FitnessProfileRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountFitnessPut(fitnessProfileRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [emailId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountForgotPasswordGet(emailId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountForgotPasswordGet(emailId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetCorporateGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetCorporateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetDemographicsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetDemographicsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetFitnessGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetFitnessGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetMyApprovalsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetMyApprovalsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetMyInvitesGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetMyInvitesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetProfileGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetSocialGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetSocialGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserDashboardConfigGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetUserDashboardConfigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserDashboardPreferenceGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetUserDashboardPreferenceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserTeamPreferenceGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetUserTeamPreferenceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetUserpaymentplansGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountGetUserpaymentplansGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequestModel} [loginRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(loginRequestModel?: LoginRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountLoginPost(loginRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaymentDetailsRequestModel} [paymentDetailsRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPaymentplansPut(paymentDetailsRequestModel?: PaymentDetailsRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountPaymentplansPut(paymentDetailsRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPaymentplansrolesGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountPaymentplansrolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPlansGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountPlansGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterUserModel} [registerUserModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost(registerUserModel?: RegisterUserModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountRegisterPost(registerUserModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterTempUserModel} [registerTempUserModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegistertempPost(registerTempUserModel?: RegisterTempUserModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountRegistertempPost(registerTempUserModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [emailId] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountResetPasswordPost(emailId?: string, password?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountResetPasswordPost(emailId, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRolesGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialProfileRequestModel} [socialProfileRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountSocialPut(socialProfileRequestModel?: SocialProfileRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountSocialPut(socialProfileRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Corporate} [corporate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateCorporatePut(corporate?: Corporate, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountUpdateCorporatePut(corporate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateInviteStatusPut(id?: number, status?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountUpdateInviteStatusPut(id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUserInfoGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserPaymentPlan} [userPaymentPlan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUserpaymentplansPost(userPaymentPlan?: UserPaymentPlan, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountUserpaymentplansPost(userPaymentPlan, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {Corporate} [corporate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountAddCorporatePost(corporate?: Corporate, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountAddCorporatePost(corporate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {string} [subject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountAddInvitePost(email?: string, subject?: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountAddInvitePost(email, subject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserDashboardConfiguration} [userDashboardConfiguration] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountAddUserDashboardConfigPost(userDashboardConfiguration?: UserDashboardConfiguration, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountAddUserDashboardConfigPost(userDashboardConfiguration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserDashboardPreference} [userDashboardPreference] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountAddUserDashboardPreferencePost(userDashboardPreference?: UserDashboardPreference, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountAddUserDashboardPreferencePost(userDashboardPreference, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserDashboardPreference} [userDashboardPreference] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountAddUserTeamPreferencePost(userDashboardPreference?: UserDashboardPreference, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountAddUserTeamPreferencePost(userDashboardPreference, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {boolean} [isApproved] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountApproveInvitePut(id?: number, isApproved?: boolean, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountApproveInvitePut(id, isApproved, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountDashboardConfigurationGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountDashboardConfigurationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountDeleteUserDashboardPreferenceDelete(id?: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountDeleteUserDashboardPreferenceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountDeleteUserTeamPreferenceDelete(id?: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountDeleteUserTeamPreferenceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DemographicRequestModel} [demographicRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountDemographicsPut(demographicRequestModel?: DemographicRequestModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountDemographicsPut(demographicRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FitnessProfileRequestModel} [fitnessProfileRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountFitnessPut(fitnessProfileRequestModel?: FitnessProfileRequestModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountFitnessPut(fitnessProfileRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [emailId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountForgotPasswordGet(emailId?: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountForgotPasswordGet(emailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetCorporateGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetCorporateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetDemographicsGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetDemographicsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetFitnessGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetFitnessGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetMyApprovalsGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetMyApprovalsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetMyInvitesGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetMyInvitesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetProfileGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetSocialGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetSocialGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetUserDashboardConfigGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetUserDashboardConfigGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetUserDashboardPreferenceGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetUserDashboardPreferenceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetUserTeamPreferenceGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetUserTeamPreferenceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetUserpaymentplansGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetUserpaymentplansGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequestModel} [loginRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountLoginPost(loginRequestModel?: LoginRequestModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountLoginPost(loginRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaymentDetailsRequestModel} [paymentDetailsRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountPaymentplansPut(paymentDetailsRequestModel?: PaymentDetailsRequestModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountPaymentplansPut(paymentDetailsRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountPaymentplansrolesGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountPaymentplansrolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountPlansGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountPlansGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterUserModel} [registerUserModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountRegisterPost(registerUserModel?: RegisterUserModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountRegisterPost(registerUserModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterTempUserModel} [registerTempUserModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountRegistertempPost(registerTempUserModel?: RegisterTempUserModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountRegistertempPost(registerTempUserModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [emailId] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountResetPasswordPost(emailId?: string, password?: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountResetPasswordPost(emailId, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountRolesGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialProfileRequestModel} [socialProfileRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountSocialPut(socialProfileRequestModel?: SocialProfileRequestModel, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountSocialPut(socialProfileRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Corporate} [corporate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountUpdateCorporatePut(corporate?: Corporate, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountUpdateCorporatePut(corporate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {number} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountUpdateInviteStatusPut(id?: number, status?: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountUpdateInviteStatusPut(id, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountUserInfoGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserPaymentPlan} [userPaymentPlan] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountUserpaymentplansPost(userPaymentPlan?: UserPaymentPlan, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountUserpaymentplansPost(userPaymentPlan, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WeatherForecastsApi - axios parameter creator
 * @export
 */
export const WeatherForecastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WeatherForecasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastsApi - functional programming interface
 * @export
 */
export const WeatherForecastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeatherForecast(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeatherForecast(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WeatherForecastsApi - factory interface
 * @export
 */
export const WeatherForecastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.getWeatherForecast(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastsApi - object-oriented interface
 * @export
 * @class WeatherForecastsApi
 * @extends {BaseAPI}
 */
export class WeatherForecastsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastsApi
     */
    public getWeatherForecast(options?: AxiosRequestConfig) {
        return WeatherForecastsApiFp(this.configuration).getWeatherForecast(options).then((request) => request(this.axios, this.basePath));
    }
}


